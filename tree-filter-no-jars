#!/bin/bash

# TODO - Declare this is not on environment.
if [[ "$tmpjardir" == "" ]]; then
  tmpjardir="/home/josh/tmp/tmp2/"
fi

. $(dirname $0)/binary-repo-lib.sh

#modfiles=$(git diff-tree -r --name-status $GIT_COMMIT | awk '$1 != "D" { print $2 }')
user=user
password=password


printInfo() {
  echo ""
  echo "Arguments $@"
  echo "GIT_DIR = $GIT_DIR"
  echo "GIT_WORK_TREE = $GIT_WORK_TREE"
  echo "GIT_INDEX_TREE = $GIT_INDEX_FILE"
  echo "GIT_COMMIT = $GIT_COMMIT"
  echo "Changes"
  echo "-----------"
  echo "$modfiles"
  echo "-----------"
}

fixWhitespace() {
  # TODO - on Mac use 'gsed'.
  sed -i 's/[ \t\r]*$//' "$1"
}

fixWhitespaceFiles() {
  # Fix whitespace in source
  if test -d src; then
    sourcefiles="$(find src -name '*.scala') $(find src -name '*.java')"
    for file in $sourcefiles; do
      if test -f $file; then
        #fix whitespace and such
        fixWhitespace "$(pwd)/$file"
      fi
    done
  fi
}

removeJarFiles() {
  # Remove jar files
  jarfiles=$(find . -name "*.jar")
  for file in $jarfiles; do
    if test -f $file; then
      p=$(pwd)
      pushJarFile "$p/$file" "$p" "$user" "$password"
      rm -f $file
    fi
  done
}

copyFirstCommit() {
  # Copy utility scripts into EVERY COMMIT.  This way, there' always available for recovering JAR Files.
  cp -R $(dirname $0)/first-commit/* .
  cp $(dirname $0)/first-commit/.gitignore .gitignore
}

removeShootoutTests() {
  if [[ -f build.xml ]]; then
    sed '/<shootouttests.*/d' -i build.xml
  fi
  if [[ -d test/files/shootout/ ]]; then
    rm -rf test/files/shootout
  fi
}


fixWhitespaceFiles
removeJarFiles
copyFirstCommit
removeShootoutTests

exit 0

